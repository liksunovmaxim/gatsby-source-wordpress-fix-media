"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getCache = exports.default = void 0;

require("source-map-support/register");

var _cacheManager = _interopRequireDefault(require("cache-manager"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _cacheManagerFsHash = _interopRequireDefault(require("cache-manager-fs-hash"));

var _path = _interopRequireDefault(require("path"));

const MAX_CACHE_SIZE = 250;
const TTL = Number.MAX_SAFE_INTEGER;

class Cache {
  constructor({
    name = `db`,
    store = _cacheManagerFsHash.default,
    cacheDirectory = `.wordpress-cache/caches`
  } = {}) {
    this.name = name;
    this.store = store;
    this.cacheDirectory = cacheDirectory;
  }

  get directory() {
    return _path.default.join(process.cwd(), `${this.cacheDirectory}/${this.name}`);
  }

  init() {
    _fsExtra.default.ensureDirSync(this.directory);

    const configs = [{
      store: `memory`,
      max: MAX_CACHE_SIZE,
      ttl: TTL
    }, {
      store: this.store,
      ttl: TTL,
      options: {
        path: this.directory,
        ttl: TTL
      }
    }];
    const caches = configs.map(cache => _cacheManager.default.caching(cache));
    this.cache = _cacheManager.default.multiCaching(caches);
    return this;
  }

  get(key) {
    return new Promise(resolve => {
      if (!this.cache) {
        throw new Error(`Cache wasn't initialised yet, please run the init method first`);
      }

      this.cache.get(key, (err, res) => {
        resolve(err ? undefined : res);
      });
    });
  }

  set(key, value, args = {
    ttl: TTL
  }) {
    return new Promise(resolve => {
      if (!this.cache) {
        throw new Error(`Cache wasn't initialised yet, please run the init method first`);
      }

      this.cache.set(key, value, args, err => {
        resolve(err ? undefined : value);
      });
    });
  }

}

exports.default = Cache;
const caches = new Map();

const getCache = name => {
  let cache = caches.get(name);

  if (!cache) {
    cache = new Cache({
      name
    }).init();
    caches.set(name, cache);
  }

  return cache;
};

exports.getCache = getCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy9jYWNoZS5qcyJdLCJuYW1lcyI6WyJNQVhfQ0FDSEVfU0laRSIsIlRUTCIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJDYWNoZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInN0b3JlIiwiZnNTdG9yZSIsImNhY2hlRGlyZWN0b3J5IiwiZGlyZWN0b3J5IiwicGF0aCIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiaW5pdCIsImZzIiwiZW5zdXJlRGlyU3luYyIsImNvbmZpZ3MiLCJtYXgiLCJ0dGwiLCJvcHRpb25zIiwiY2FjaGVzIiwibWFwIiwiY2FjaGUiLCJtYW5hZ2VyIiwiY2FjaGluZyIsIm11bHRpQ2FjaGluZyIsImdldCIsImtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwiRXJyb3IiLCJlcnIiLCJyZXMiLCJ1bmRlZmluZWQiLCJzZXQiLCJ2YWx1ZSIsImFyZ3MiLCJNYXAiLCJnZXRDYWNoZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsY0FBYyxHQUFHLEdBQXZCO0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLGdCQUFuQjs7QUFFZSxNQUFNQyxLQUFOLENBQVk7QUFDekJDLEVBQUFBLFdBQVcsQ0FBQztBQUNWQyxJQUFBQSxJQUFJLEdBQUksSUFERTtBQUVWQyxJQUFBQSxLQUFLLEdBQUdDLDJCQUZFO0FBR1ZDLElBQUFBLGNBQWMsR0FBSTtBQUhSLE1BSVIsRUFKTyxFQUlIO0FBQ04sU0FBS0gsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0UsY0FBTCxHQUFzQkEsY0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxTQUFKLEdBQWdCO0FBQ2QsV0FBT0MsY0FBS0MsSUFBTCxDQUFVQyxPQUFPLENBQUNDLEdBQVIsRUFBVixFQUEwQixHQUFFLEtBQUtMLGNBQWUsSUFBRyxLQUFLSCxJQUFLLEVBQTdELENBQVA7QUFDRDs7QUFFRFMsRUFBQUEsSUFBSSxHQUFHO0FBQ0xDLHFCQUFHQyxhQUFILENBQWlCLEtBQUtQLFNBQXRCOztBQUVBLFVBQU1RLE9BQU8sR0FBRyxDQUNkO0FBQ0VYLE1BQUFBLEtBQUssRUFBRyxRQURWO0FBRUVZLE1BQUFBLEdBQUcsRUFBRW5CLGNBRlA7QUFHRW9CLE1BQUFBLEdBQUcsRUFBRW5CO0FBSFAsS0FEYyxFQU1kO0FBQ0VNLE1BQUFBLEtBQUssRUFBRSxLQUFLQSxLQURkO0FBRUVhLE1BQUFBLEdBQUcsRUFBRW5CLEdBRlA7QUFHRW9CLE1BQUFBLE9BQU8sRUFBRTtBQUNQVixRQUFBQSxJQUFJLEVBQUUsS0FBS0QsU0FESjtBQUVQVSxRQUFBQSxHQUFHLEVBQUVuQjtBQUZFO0FBSFgsS0FOYyxDQUFoQjtBQWdCQSxVQUFNcUIsTUFBTSxHQUFHSixPQUFPLENBQUNLLEdBQVIsQ0FBYUMsS0FBRCxJQUFXQyxzQkFBUUMsT0FBUixDQUFnQkYsS0FBaEIsQ0FBdkIsQ0FBZjtBQUVBLFNBQUtBLEtBQUwsR0FBYUMsc0JBQVFFLFlBQVIsQ0FBcUJMLE1BQXJCLENBQWI7QUFFQSxXQUFPLElBQVA7QUFDRDs7QUFFRE0sRUFBQUEsR0FBRyxDQUFDQyxHQUFELEVBQU07QUFDUCxXQUFPLElBQUlDLE9BQUosQ0FBYUMsT0FBRCxJQUFhO0FBQzlCLFVBQUksQ0FBQyxLQUFLUCxLQUFWLEVBQWlCO0FBQ2YsY0FBTSxJQUFJUSxLQUFKLENBQ0gsZ0VBREcsQ0FBTjtBQUdEOztBQUNELFdBQUtSLEtBQUwsQ0FBV0ksR0FBWCxDQUFlQyxHQUFmLEVBQW9CLENBQUNJLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2hDSCxRQUFBQSxPQUFPLENBQUNFLEdBQUcsR0FBR0UsU0FBSCxHQUFlRCxHQUFuQixDQUFQO0FBQ0QsT0FGRDtBQUdELEtBVE0sQ0FBUDtBQVVEOztBQUVERSxFQUFBQSxHQUFHLENBQUNQLEdBQUQsRUFBTVEsS0FBTixFQUFhQyxJQUFJLEdBQUc7QUFBRWxCLElBQUFBLEdBQUcsRUFBRW5CO0FBQVAsR0FBcEIsRUFBa0M7QUFDbkMsV0FBTyxJQUFJNkIsT0FBSixDQUFhQyxPQUFELElBQWE7QUFDOUIsVUFBSSxDQUFDLEtBQUtQLEtBQVYsRUFBaUI7QUFDZixjQUFNLElBQUlRLEtBQUosQ0FDSCxnRUFERyxDQUFOO0FBR0Q7O0FBQ0QsV0FBS1IsS0FBTCxDQUFXWSxHQUFYLENBQWVQLEdBQWYsRUFBb0JRLEtBQXBCLEVBQTJCQyxJQUEzQixFQUFrQ0wsR0FBRCxJQUFTO0FBQ3hDRixRQUFBQSxPQUFPLENBQUNFLEdBQUcsR0FBR0UsU0FBSCxHQUFlRSxLQUFuQixDQUFQO0FBQ0QsT0FGRDtBQUdELEtBVE0sQ0FBUDtBQVVEOztBQWpFd0I7OztBQW9FM0IsTUFBTWYsTUFBTSxHQUFHLElBQUlpQixHQUFKLEVBQWY7O0FBRU8sTUFBTUMsUUFBUSxHQUFJbEMsSUFBRCxJQUFVO0FBQ2hDLE1BQUlrQixLQUFLLEdBQUdGLE1BQU0sQ0FBQ00sR0FBUCxDQUFXdEIsSUFBWCxDQUFaOztBQUNBLE1BQUksQ0FBQ2tCLEtBQUwsRUFBWTtBQUNWQSxJQUFBQSxLQUFLLEdBQUcsSUFBSXBCLEtBQUosQ0FBVTtBQUFFRSxNQUFBQTtBQUFGLEtBQVYsRUFBb0JTLElBQXBCLEVBQVI7QUFDQU8sSUFBQUEsTUFBTSxDQUFDYyxHQUFQLENBQVc5QixJQUFYLEVBQWlCa0IsS0FBakI7QUFDRDs7QUFDRCxTQUFPQSxLQUFQO0FBQ0QsQ0FQTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYW5hZ2VyIGZyb20gXCJjYWNoZS1tYW5hZ2VyXCJcbmltcG9ydCBmcyBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0IGZzU3RvcmUgZnJvbSBcImNhY2hlLW1hbmFnZXItZnMtaGFzaFwiXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiXG5cbmNvbnN0IE1BWF9DQUNIRV9TSVpFID0gMjUwXG5jb25zdCBUVEwgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBuYW1lID0gYGRiYCxcbiAgICBzdG9yZSA9IGZzU3RvcmUsXG4gICAgY2FjaGVEaXJlY3RvcnkgPSBgLndvcmRwcmVzcy1jYWNoZS9jYWNoZXNgLFxuICB9ID0ge30pIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlXG4gICAgdGhpcy5jYWNoZURpcmVjdG9yeSA9IGNhY2hlRGlyZWN0b3J5XG4gIH1cblxuICBnZXQgZGlyZWN0b3J5KCkge1xuICAgIHJldHVybiBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgYCR7dGhpcy5jYWNoZURpcmVjdG9yeX0vJHt0aGlzLm5hbWV9YClcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgZnMuZW5zdXJlRGlyU3luYyh0aGlzLmRpcmVjdG9yeSlcblxuICAgIGNvbnN0IGNvbmZpZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIHN0b3JlOiBgbWVtb3J5YCxcbiAgICAgICAgbWF4OiBNQVhfQ0FDSEVfU0laRSxcbiAgICAgICAgdHRsOiBUVEwsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdG9yZTogdGhpcy5zdG9yZSxcbiAgICAgICAgdHRsOiBUVEwsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBwYXRoOiB0aGlzLmRpcmVjdG9yeSxcbiAgICAgICAgICB0dGw6IFRUTCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXVxuXG4gICAgY29uc3QgY2FjaGVzID0gY29uZmlncy5tYXAoKGNhY2hlKSA9PiBtYW5hZ2VyLmNhY2hpbmcoY2FjaGUpKVxuXG4gICAgdGhpcy5jYWNoZSA9IG1hbmFnZXIubXVsdGlDYWNoaW5nKGNhY2hlcylcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuY2FjaGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDYWNoZSB3YXNuJ3QgaW5pdGlhbGlzZWQgeWV0LCBwbGVhc2UgcnVuIHRoZSBpbml0IG1ldGhvZCBmaXJzdGBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgdGhpcy5jYWNoZS5nZXQoa2V5LCAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgcmVzb2x2ZShlcnIgPyB1bmRlZmluZWQgOiByZXMpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBzZXQoa2V5LCB2YWx1ZSwgYXJncyA9IHsgdHRsOiBUVEwgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmNhY2hlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2FjaGUgd2Fzbid0IGluaXRpYWxpc2VkIHlldCwgcGxlYXNlIHJ1biB0aGUgaW5pdCBtZXRob2QgZmlyc3RgXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUsIGFyZ3MsIChlcnIpID0+IHtcbiAgICAgICAgcmVzb2x2ZShlcnIgPyB1bmRlZmluZWQgOiB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBjYWNoZXMgPSBuZXcgTWFwKClcblxuZXhwb3J0IGNvbnN0IGdldENhY2hlID0gKG5hbWUpID0+IHtcbiAgbGV0IGNhY2hlID0gY2FjaGVzLmdldChuYW1lKVxuICBpZiAoIWNhY2hlKSB7XG4gICAgY2FjaGUgPSBuZXcgQ2FjaGUoeyBuYW1lIH0pLmluaXQoKVxuICAgIGNhY2hlcy5zZXQobmFtZSwgY2FjaGUpXG4gIH1cbiAgcmV0dXJuIGNhY2hlXG59XG4iXX0=